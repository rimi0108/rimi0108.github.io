I"|<p>Django Management Command는 <code class="language-plaintext highlighter-rouge">python manage.py shell</code> <code class="language-plaintext highlighter-rouge">python manage.py migrate</code> 와 같이 우리가 장고를 사용할 때 자주 사용하는 명령어를 말한다. 우리는 이 Django Command를 Custom하여 원하는 동작을 원하는 명령어로 커스텀하여 만들어 줄 수 있다.</p>

<h2 id="custom-command-만들기">custom command 만들기</h2>

<p>원하는 app 폴더 밑에 management 폴더를 만들고 그 밑에 commands 폴더를 만든다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>앱이름/management/commands
</code></pre></div></div>

<p>이런 구조가 되어야 한다.</p>

<p>폴더를 만들었으면 commands 폴더 밑에 원하는 명령어 이름으로 파일을 생성한다. 만약 <code class="language-plaintext highlighter-rouge">python manage.py insert_data_to_db</code> 라는 커스텀 command를 만들고 싶으면 <code class="language-plaintext highlighter-rouge">insert_data_to_db.py</code>라는 파일을 만들면 된다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 앱이름/management/commands/insert_data_to_db.py
</span><span class="kn">from</span> <span class="nn">django.core.management.base</span> <span class="kn">import</span> <span class="n">BaseCommand</span>
<span class="kn">from</span> <span class="nn">apps.company_info.models</span> <span class="kn">import</span> <span class="n">CompanyName</span>

<span class="k">class</span> <span class="nc">Command</span><span class="p">(</span><span class="n">BaseCommand</span><span class="p">):</span>
    <span class="n">help</span> <span class="o">=</span> <span class="s">'insert data to company_names table'</span>

    <span class="k">def</span> <span class="nf">add_arguments</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parser</span><span class="p">):</span>
        <span class="n">parser</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">'name'</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">str</span><span class="p">)</span>
        <span class="n">parser</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">'c_id_id'</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>
        <span class="n">parser</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">'language_id'</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">handle</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">options</span><span class="p">):</span>
        <span class="n">name</span> <span class="o">=</span> <span class="n">options</span><span class="p">[</span><span class="s">'name'</span><span class="p">]</span>
        <span class="n">c_id</span> <span class="o">=</span> <span class="n">options</span><span class="p">[</span><span class="s">'c_id_id'</span><span class="p">]</span>
        <span class="n">language_id</span> <span class="o">=</span> <span class="n">options</span><span class="p">[</span><span class="s">'language_id'</span><span class="p">]</span>
        <span class="n">company_name</span> <span class="o">=</span> <span class="n">CompanyName</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="n">name</span><span class="p">,</span> <span class="n">c_id</span><span class="o">=</span><span class="n">c_id</span><span class="p">,</span> <span class="n">language_id</span><span class="o">=</span><span class="n">language_id</span><span class="p">)</span>
        <span class="n">company_name</span><span class="p">.</span><span class="n">save</span><span class="p">()</span>

        <span class="bp">self</span><span class="p">.</span><span class="n">stdout</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="s">'Successfully make company name "%s"'</span> <span class="o">%</span> <span class="n">name</span><span class="p">)</span>
</code></pre></div></div>

<p>클래스 이름은 Command로 만들어주고 BaseCommand를 받아온다. 밑 help 변수에는 만들 command의 용도를 설명하면 된다. (이름은 꼭 Command여야 한다.)</p>

<p>add_arguments 함수에 parser을 받아 함수 아래 <code class="language-plaintext highlighter-rouge">parser.add_argument(받을 인수, 타입)</code> 을 적는다.</p>

<p>handle이라는 함수에 add_arguments에서 받은 인수를 변수에 넣어준다. 나는 name과 c_id(회사 id), language_id를 받았다.
받은 인수를 model에 저장하고 save 해준다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python manage.py insert_data_to_db 이름 회사id 언어id
</code></pre></div></div>

<p>를 manage.py가 있는 경로에서 실행하면</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Successfully make company name 이름
</code></pre></div></div>

<p>data가 db에 잘 들어간 것을 확인할 수 있다.</p>

<p>참 신기하다! ㅎㅎ</p>
:ET