I"{<h2 id="http란">🤔 HTTP란?</h2>

<p><strong>Hyper Text Transfer Protocol</strong>의 약자로 우리가 인터넷에서 정보를 주고 받는데 필요한 <strong>통신 규약</strong>이다. 우리는 이 통신 규약에 따라 인터넷에서 데이터를 주고 받고 있다. 만약 이 규약이 없었다면 우리는 엉망으로 데이터를 주고 받고 있을지도 모른다. 😵‍💫</p>

<p>우리가 사용하는 웹 브라우저에서 인터넷 주소 맨 앞에 들어가는 <code class="language-plaintext highlighter-rouge">http://</code> 도 바로 HTTP를 사용해서 정보를 교환하겠다는 표시이다.</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">http://</code> 표기는 월드 와이드 웹의 창시자인 팀 버너스리의 실수에서 비롯되었는데, 사실 2개의 빗금(//)은 필요가 없다고 한다. 굳이 빗금까지 입력할 필요는 없고 쌍점(:)까지만 써도 정상적으로 접속 된다! 😂</p>
</blockquote>

<h2 id="-http-동작-과정">📍 HTTP 동작 과정</h2>

<p>client(사용자)는 웹 브라우저를 통해서 특정 요청(request)를 보내게 된다. 서버(server)는 사용자가 보낸 요청을 받고, 그 요청에 응답한다. 가게에서 손님(client)이 요구하면 점원(server)이 물건을 주듯이 말이다. 가게에서와 마찬가지로 client인 웹 브라우저가 HTTP를 통하여 서버로부터 웹페이지(HTML)나 그림 정보를 요청하면, 서버는 이 요청에 응답하여 필요한 정보를 해당 사용자에게 전달하게 된다. 이 정보가 모니터와 같은 출력 장치를 통해 사용자에게 나타나는 것이다.</p>

<p>🙋🏻‍♀️ client : ~에 대한 데이터 주세요 (request)</p>

<p>🖥️ server : 자 여기 client가 요청한 데이터 (response) </p>

<h2 id="-http의-특성">📍 HTTP의 특성</h2>

<h3 id="client-server-구조">Client-Server 구조</h3>

<p>HTTP는 client가 request를 생성하기 위한 연결을 연 다음 response를 받을 때까지 대기하는 전통적인 client-server 모델을 따른다.</p>

<h3 id="무상태-stateless">무상태 Stateless</h3>

<p>HTTP는 이전 request를 기억하지 않는다. HTTP 연결이 해제됨과 동시에 server는 client가 요청했던 request의 결과에 대해서 잊어버리게 된다.</p>

<p>만약 client가 아이디와 비밀번호 정보를 request를 통해 보내고 server에게 그에 대한 response를 받았다면 그 다음 request에서 동일한 response를 원한다해도 HTTP는 stateless protocol이기 때문에 이전 request를 기억하지 못한다. 이 때문에 client는 request 요청을 할 때마다 아이디와 비밀번호를 함께 요청해야 한다. (하지만 HTTP 세션 &amp; 쿠키 🍪를 이용하면 이것을 개선할 수 있다.)</p>

<p>이렇게 데이터를 서버에 남겨두고 재사용 할 수 없기 때문에 <em>일련의 요청으로 전송되는 반복적인 데이터를 증가시켜 네트워크 성능을 저하시킨다는 단점</em>이 있지만 상태를 보관하지 않으므로 client의 요청에 어느 server가 응답해도 상관이 없기 때문에 <em>client의 요청이 대폭 증가해도 server를 증설해 해결할 수 있다는 장점</em>이 있다.</p>

<h3 id="비연결성-connectionless">비연결성 Connectionless</h3>

<p>비연결성은 클라이언트와 서버가 한 번 연결을 맺은 후, 클라이언트 요청에 대해 서버가 응답을 마치면 맺었던 연결을 끊어 버리는 성질을 말한다.</p>

<h2 id="-http의-흐름">📍 HTTP의 흐름</h2>

<ol>
  <li>
    <p>TCP 연결을 연다.</p>

    <p>TCP 연결은 request를 보내거나 response를 받는데 사용된다. client는 새 연결을 열거나, 기존 연결을 재사용하거나, server에 대한 여러 TCP 연결을 열 수 있다.</p>
  </li>
  <li>
    <p>HTTP 메시지를 전송한다.</p>
  </li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">GET</span> <span class="o">/</span> <span class="n">HTTP</span><span class="o">/</span><span class="mf">1.1</span>
<span class="n">Host</span><span class="p">:</span> <span class="n">developer</span><span class="p">.</span><span class="n">mozilla</span><span class="p">.</span><span class="n">org</span>
<span class="n">Accept</span><span class="o">-</span><span class="n">Language</span><span class="p">:</span> <span class="n">fr</span>
</code></pre></div></div>

<ol>
  <li>server에 의해 전송된 response를 읽어들인다.</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">HTTP</span><span class="o">/</span><span class="mf">1.1</span> <span class="mi">200</span> <span class="n">OK</span>
<span class="n">Date</span><span class="p">:</span> <span class="n">Sat</span><span class="p">,</span> <span class="mi">09</span> <span class="n">Oct</span> <span class="mi">2010</span> <span class="mi">14</span><span class="p">:</span><span class="mi">28</span><span class="p">:</span><span class="mi">02</span> <span class="n">GMT</span>
<span class="n">Server</span><span class="p">:</span> <span class="n">Apache</span>
<span class="n">Last</span><span class="o">-</span><span class="n">Modified</span><span class="p">:</span> <span class="n">Tue</span><span class="p">,</span> <span class="mi">01</span> <span class="n">Dec</span> <span class="mi">2009</span> <span class="mi">20</span><span class="p">:</span><span class="mi">18</span><span class="p">:</span><span class="mi">22</span> <span class="n">GMT</span>
<span class="n">ETag</span><span class="p">:</span> <span class="s">"51142bc1-7449-479b075b2891b"</span>
<span class="n">Accept</span><span class="o">-</span><span class="n">Ranges</span><span class="p">:</span> <span class="nb">bytes</span>
<span class="n">Content</span><span class="o">-</span><span class="n">Length</span><span class="p">:</span> <span class="mi">29769</span>
<span class="n">Content</span><span class="o">-</span><span class="n">Type</span><span class="p">:</span> <span class="n">text</span><span class="o">/</span><span class="n">html</span>

<span class="o">&lt;</span><span class="err">!</span><span class="n">DOCTYPE</span> <span class="n">html</span><span class="p">...</span> <span class="p">(</span><span class="n">here</span> <span class="n">comes</span> <span class="n">the</span> <span class="mi">29769</span> <span class="nb">bytes</span> <span class="n">of</span> <span class="n">the</span> <span class="n">requested</span> <span class="n">web</span> <span class="n">page</span><span class="p">)</span>
</code></pre></div></div>

<ol>
  <li>연결을 닫거나 다른 request를 위해 재사용한다.</li>
</ol>

<hr />

<h3><참고></참고></h3>

<ul>
  <li><a href="https://namu.wiki/w/HTTP">https://namu.wiki/w/HTTP</a></li>
  <li><a href="https://velog.io/@ss-won/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-HTTP-Message%EC%99%80-Status-Code">https://velog.io/@ss-won/네트워크-HTTP-Message와-Status-Code</a></li>
  <li><a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Methods">https://developer.mozilla.org/ko/docs/Web/HTTP/Methods</a></li>
  <li><a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Messages">https://developer.mozilla.org/ko/docs/Web/HTTP/Messages</a></li>
  <li><a href="https://medium.com/@lyhlg0201/http-method-d561b77df7">https://medium.com/@lyhlg0201/http-method-d561b77df7</a></li>
  <li><a href="https://kingjakeu.github.io/study/2020/07/15/http-post-put/">https://kingjakeu.github.io/study/2020/07/15/http-post-put/</a></li>
  <li><a href="https://victorydntmd.tistory.com/286">https://victorydntmd.tistory.com/286</a></li>
</ul>
:ET