<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-11-14T17:06:08+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">rimlog</title><subtitle>An amazing website.</subtitle><author><name>Rim</name><email>hyerimc858@gmail.com</email></author><entry><title type="html">[Docker] Django + MySQL 환경 구성하기</title><link href="http://localhost:4000/til/docker/" rel="alternate" type="text/html" title="[Docker] Django + MySQL 환경 구성하기" /><published>2021-11-13T00:00:00+09:00</published><updated>2021-11-13T00:00:00+09:00</updated><id>http://localhost:4000/til/docker</id><content type="html" xml:base="http://localhost:4000/til/docker/">&lt;blockquote&gt;
  &lt;p&gt;docker 설치완료를 가정하고 진행해보겠습니다. mac os 환경에서 진행되었습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Django 프로젝트를 만들어주고 프로젝트 폴더안에 &lt;strong&gt;Dockerfile&lt;/strong&gt;과 &lt;strong&gt;docker-compose.yml&lt;/strong&gt; 파일을 생성해줍니다.&lt;/p&gt;

&lt;p&gt;참고로, Docker-Compose로 도커 컨테이너를 자동 생성한 후, DockerFile로 생성한 컨테이너 안에 자동으로 세팅 작업까지 돌아갈 수 있도록 할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;django-프로젝트-폴더-구조&quot;&gt;Django 프로젝트 폴더 구조&lt;/h2&gt;

&lt;div class=&quot;language-Dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.
├── Dockerfile
├── README.md
├── __pycache__
│   └── my_settings.cpython-38.pyc
├── docker-compose.yml
├── manage.py
├── moneybook
│   ├── __init__.py
│   ├── __pycache__
│   ├── asgi.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
├── my_settings.py
└── requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;폴더 구조는 위와 같습니다. 참고로 moneybook은 자신의 프로젝트 폴더 이름입니다.&lt;/p&gt;

&lt;h2 id=&quot;dockerfile&quot;&gt;Dockerfile&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Dockerfile
FROM python:3.8
ENV PYTHONUNBUFFERED 1
RUN apt-get -y update
RUN apt-get -y install vim

RUN mkdir /srv/code
ADD requirements.txt /srv/code/
RUN python3 -m pip install --upgrade pip
RUN pip install -r requirements.txt

# Adds our application code to the image
COPY . /code
WORKDIR /code

EXPOSE 8000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Dockerfile은 이미지를 구축하기 위한 작업을 차례대로 기술한 것입니다. Dockerfile을 사용하면 파일 내에 작성되어 있는 순서대로 명령어가 실행되며 이미지를 구축해나갑니다.&lt;/p&gt;

&lt;p&gt;위에 작성된 Dockerfile의 명령어를 살펴봅시다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FROM python:3.8&lt;/code&gt;은 python 3.8을 베이스 이미지로 지정한다는 것입니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ENV PYTHONUNVUFFERED 1&lt;/code&gt;은 저도 잘 몰라서
&lt;a href=&quot;https://stackoverflow.com/questions/59812009/what-is-the-use-of-pythonunbuffered-in-docker-file&quot;&gt;stackoverflow&lt;/a&gt;를 찾아봤습니다. 링크 글에 따르면 &lt;em&gt;PYTONUNBUFFERED를 비어 있지 않은 값으로 설정하면 파이썬 출력이 먼저 버퍼링되지 않고 터미널(예: 컨테이너 로그)로 바로 전송되고 애플리케이션 출력(예: django 로그)을 실시간으로 볼 수 있다. 또한 파이썬 애플리케이션이 충돌하는 경우 부분 출력은 버퍼에 고정되지 않으며 기록되지 않습니다.&lt;/em&gt; 라고 하네요 😊&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RUN&lt;/code&gt; 명령어는 베이스 이미지에 새로운 레이어를 추가해 커맨드를 실행하고, 결과를 빌드 이미지에 반영하는 명령어라고 합니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;4.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RUN mkdir /srv/code
ADD requirements.txt /srv/code/
RUN python3 -m pip install --upgrade pip
RUN pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/srv/code&lt;/code&gt;라는 디렉토리를 생성하고 requirements.txt를 디렉토리에 넣은 후 설치하는 명령어입니다.&lt;/p&gt;

&lt;p&gt;5.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;COPY . /code
WORKDIR /code
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위는 로컬 코드를 이미지에 추가하는 명령어입니다.&lt;/p&gt;

&lt;p&gt;6.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;EXPOSE 8000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위는 컨테이너에서 공개하는 포트 번호를 8000으로 지정하는 명령어입니다.&lt;/p&gt;

&lt;h2 id=&quot;docker-compose&quot;&gt;Docker compose&lt;/h2&gt;

&lt;p&gt;Dockerfile의 명령어를 살펴봤으니 Docker compose 파일을 살펴봅시다.&lt;/p&gt;

&lt;p&gt;Docker Compose는 여러 컨테이너와 이미지를 정리하고 쉽게 관리하기 위한 도구입니다. 이것을 사용하면 여러 컨테이너가 연계되어 움직이는 서비스를 쉽게 관리할 수 있습니다.&lt;/p&gt;

&lt;p&gt;Dokcer Compose에서는 라이프 사이클을 관리하는 컨테이너를 서비스라고합니다. 이 서비스에서 사용하는 컨테이너의 설정(환경 변수, 네트워크, 볼륨, 포트 포워딩 설정 등)은 Compose 파일이라는 YAML 파일(docker-compose.yml)에 기술하게 되어 있습니다.&lt;/p&gt;

&lt;p&gt;서비스에서 적용된 설정은 Compose 파일에 기술된 자원(컨테이너, 이미지, 볼륨, 네트워크)에만 적용되기 때문에 여러 환경을 관리할 때 안전하게 조작할 수 있으며, db 같은 추상적인 서비스 이름도 안전하게 사용할 수 있습니다. 따라서 하나의 컨테이너를 움직이더라고 docker 커맨드보다 쉽게 컨테이너를 관리할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;// docker-compose.yml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3&quot;&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql:5.7&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysqld --character-set-server=utf8 --collation-server=utf8_general_ci --default-authentication-plugin=mysql_native_password&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0000&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;MYSQL_DATABASE&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;django&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;MYSQL_USER&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;django&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;MYSQL_PASSWORD&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;django&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;healthcheck&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CMD&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;mysqladmin&quot;&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ping&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-h&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;localhost&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;20s&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;retries&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;7001:3306&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;DJANGO_SECRET_KEY=local&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;django&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;bash -c &quot;./manage.py makemigrations &amp;amp;&amp;amp;&lt;/span&gt;
               &lt;span class=&quot;s&quot;&gt;./manage.py migrate &amp;amp;&amp;amp;&lt;/span&gt;
               &lt;span class=&quot;s&quot;&gt;./manage.py runserver 0.0.0.0:8000&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./:/code&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;8000:8000&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;db&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;제가 작성한 mysql과 django 서버를 실행하기 위한 docker-compose 파일의 커맨드를 보겠습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;맨 위의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;version&lt;/code&gt;은 docker-compose의 버전을 명시한 것입니다. 자신의 로컬에 깔려있는 버전을 잘 확인하여 작성하면 됩니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;저는 db를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql 5.7&lt;/code&gt; 버전으로 사용하기 위해 이미지를 설정해주었습니다. 실행 시 같이 실행될 커맨드와 컨테이너 이름, mysql 환경 설정까지 함께 설정해 주었습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;서버 환경은 django를 사용하기 위해 command를 이용해 migrate와 runserver 명령어를실행하게 합니다.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;depends_on&lt;/code&gt; 을 사용하여 mysql 컨테이너에 의존하는 service임을 명시했습니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Dockerfile, docker-compose.yml 파일을 작성한후&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 명령어를 입력하면
&lt;img width=&quot;1054&quot; alt=&quot;스크린샷 2021-11-14 오후 3 13 44&quot; src=&quot;https://user-images.githubusercontent.com/73830753/141670549-4de87f4a-613d-468b-9372-98baa2dfae65.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;정상적으로 컨테이너가 실행되는 것을 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;docker 띄우는데만 하루 꼬박걸렸다… 😢 너무 어려워서 차근차근 더 알아가야할 것 같다!&lt;/em&gt;&lt;/p&gt;

&lt;참고&gt; 도커 실전 가이드 (도서)
&lt;/참고&gt;</content><author><name>Rim</name><email>hyerimc858@gmail.com</email></author><category term="TIL" /><category term="Python" /><category term="Django" /><category term="MySQL" /><category term="Docker" /><summary type="html">Docker를 이용하여 Django 서버를 띄워보자 (Feat. MySQL)</summary></entry><entry><title type="html">[Django] Django Custom Command</title><link href="http://localhost:4000/til/custom-command/" rel="alternate" type="text/html" title="[Django] Django Custom Command" /><published>2021-11-11T00:00:00+09:00</published><updated>2021-11-13T00:00:00+09:00</updated><id>http://localhost:4000/til/custom-command</id><content type="html" xml:base="http://localhost:4000/til/custom-command/">&lt;p&gt;Django Management Command는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python manage.py shell&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python manage.py migrate&lt;/code&gt; 와 같이 우리가 장고를 사용할 때 자주 사용하는 명령어를 말한다. 우리는 이 Django Command를 Custom하여 원하는 동작을 원하는 명령어로 커스텀하여 만들어 줄 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;custom-command-만들기&quot;&gt;custom command 만들기&lt;/h2&gt;

&lt;p&gt;원하는 app 폴더 밑에 management 폴더를 만들고 그 밑에 commands 폴더를 만든다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;앱이름/management/commands
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이런 구조가 되어야 한다.&lt;/p&gt;

&lt;p&gt;폴더를 만들었으면 commands 폴더 밑에 원하는 명령어 이름으로 파일을 생성한다. 만약 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python manage.py insert_data_to_db&lt;/code&gt; 라는 커스텀 command를 만들고 싶으면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert_data_to_db.py&lt;/code&gt;라는 파일을 만들면 된다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 앱이름/management/commands/insert_data_to_db.py
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.core.management.base&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseCommand&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;apps.company_info.models&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompanyName&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;help&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'insert data to company_names table'&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'c_id_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'language_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;c_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'c_id_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;language_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'language_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;company_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompanyName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;language_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;language_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;company_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Successfully make company name &quot;%s&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;클래스 이름은 Command로 만들어주고 BaseCommand를 받아온다. 밑 help 변수에는 만들 command의 용도를 설명하면 된다. (이름은 꼭 Command여야 한다.)&lt;/p&gt;

&lt;p&gt;add_arguments 함수에 parser을 받아 함수 아래 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parser.add_argument(받을 인수, 타입)&lt;/code&gt; 을 적는다.&lt;/p&gt;

&lt;p&gt;handle이라는 함수에 add_arguments에서 받은 인수를 변수에 넣어준다. 나는 name과 c_id(회사 id), language_id를 받았다.
받은 인수를 model에 저장하고 save 해준다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python manage.py insert_data_to_db 이름 회사id 언어id
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;를 manage.py가 있는 경로에서 실행하면&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Successfully make company name 이름
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;data가 db에 잘 들어간 것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;참 신기하다! ㅎㅎ&lt;/p&gt;</content><author><name>Rim</name><email>hyerimc858@gmail.com</email></author><category term="TIL" /><category term="Python" /><category term="Django" /><summary type="html">Django Custom Command를 만들고 사용해보자!</summary></entry><entry><title type="html">개발의 개자도 몰랐던 비전공자가 개발에 입문한 과정 💁‍♀️</title><link href="http://localhost:4000/chat/develop/" rel="alternate" type="text/html" title="개발의 개자도 몰랐던 비전공자가 개발에 입문한 과정 💁‍♀️" /><published>2021-10-08T00:00:00+09:00</published><updated>2021-11-13T00:00:00+09:00</updated><id>http://localhost:4000/chat/develop</id><content type="html" xml:base="http://localhost:4000/chat/develop/">&lt;h2 id=&quot;개발자에-입문한-계기-️&quot;&gt;개발자에 입문한 계기 🚶‍♀️&lt;/h2&gt;

&lt;p&gt;나는 태생부터 무언가에 몰입하기를 좋아했다. 고등학교 시절에는 책읽기, 대학교 시절에는 피아노에 몰두했었다. 대학교를 졸업하고도 무언가에 몰두할 것이 필요했었는데, 그게 바로 개발 공부였다. 우연히 알게된 개발의 시작은 퇴근하고 취미삼아 HTML, CSS으로 웹사이트를 만드는 것이었다.
&lt;img src=&quot;https://images.velog.io/images/rimi0108/post/40662765-ffe1-4b0e-bd20-2961b7de00be/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-10-08%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%203.32.01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;생활코딩을 보며 서툴게나마 만들어 본 나의 첫번째 웹 사이트다. 지금보면 정말 허접하고 별 거 없지만 그때는 내가 작성한 코드가 화면에 뜬다는 것이 참 신기하고 뿌듯했었다. 그렇게 구글 사이트 클론 코딩도 혼자 해보고, 친구 생일 축하용 사이트도 혼자 만들어보며 개발의 즐거움을 알아갔던 것 같다.&lt;/p&gt;

&lt;h2 id=&quot;개발을-직업으로-삼기로-결정하다&quot;&gt;개발을 직업으로 삼기로 결정하다&lt;/h2&gt;

&lt;p&gt;그렇게 혼자 취미로 개발을 하다보니 더 많은 사람들과 함께 개발을 하고 싶다는 욕심이 생겼다. 그렇게 자연스럽게 회사에 들어가 개발팀에 속해 프로젝트를 진행하고 싶은 꿈이 생겼다.&lt;/p&gt;

&lt;h2 id=&quot;부트캠프를-통한-프로젝트-진행-&quot;&gt;부트캠프를 통한 프로젝트 진행 👨‍👩‍👧‍👦&lt;/h2&gt;

&lt;p&gt;같이 프로젝트를 진행할 사람을 찾기는 쉽지 않았다. 어떻게 프로젝트에 뛰어들 수 있을까 고민해보다가 학원에 등록하여 수강생들과 같이 프로젝트를 진행하면 되겠다라는 생각이 들었다. 국비학원과 부트캠프 중 하나를 고민하다 좀 더 체계적인 부트캠프에 등록하자 싶어서 부트캠프에 등록하게 되었다.&lt;/p&gt;

&lt;h3 id=&quot;팀원들과-진행한-프로젝트에서-얻은-것&quot;&gt;팀원들과 진행한 프로젝트에서 얻은 것&lt;/h3&gt;

&lt;p&gt;총 두 번의 프로젝트와 한 번의 인턴십을 경험했다. 혼자 개발하는 것과 팀원들과 개발하는 것의 가장 큰 차이점이라고 하면 바로 의사소통이었다. 혼자 개발할 때는 나 혼자 알아보면 되었던 코드를 좀 더 알아보기 쉽도록 가다듬어야 했고, 백엔드와 백엔드의 의사소통은 물론 백엔드와 프론트엔드의 의사소통이 어긋나면 프로젝트 진행 또한 어긋나 버리는 것을 느꼈다.
가장 크게 느꼈던 것은 프로젝트의 &lt;strong&gt;투명성&lt;/strong&gt;의 중요성이었다. 나 혼자의 힘으로 벅찬 기능을 팀원에게 공유하지 않고 혼자 끙끙 붙잡고 있으면 나 뿐만이 아니라 팀원 전체의 진행상황이 더뎌진다는 것을 깨달았다. 그래서 내 지금 상황을 팀원들에게 투명하게 공개하고, 적절한 도움과 피드백을 받으며 진행하는 것이 좋은 프로젝트의 진행 방법이라는 것을 느꼈다. 그래서 하루 한 번 진행 상황을 공유하는 scrum 방식의 유용성도 깨달았다.&lt;/p&gt;

&lt;h2 id=&quot;내가-개발을-사랑하는-이유-&quot;&gt;내가 개발을 사랑하는 이유 🥰&lt;/h2&gt;

&lt;p&gt;모든 직업이 다 힘들다. 또한 개발자도 힘들다. 개발자들을 거북목 🐢 으로 만들고 머리를 터지게 만드는 🤯 개발이지만 내가 개발을 사랑하는 이유는 나에게 충분히 몰입할 수 있는 시간을 가지게 해주며 잘 안 풀릴 때는 ‘난 왜 이렇게 멍청한가…’ 라는 생각과 함께 머리를 쥐어뜯게 되지만 해결할 때는 그 무엇도 비교할 수 없는 &lt;strong&gt;짜릿함과 달콤함&lt;/strong&gt;을 선사해주기 때문이다.&lt;br /&gt;
또한 팀원들과 함께 만들어 낸 프로젝트의 결과물을 보면, 결코 한 사람이였다면 만들어낼 수 없었을 거라는 생각이 든다. 그렇게 개발은 나와 다른 &lt;strong&gt;타인의 소중함과 타인에 대한 존중&lt;/strong&gt;도 새삼 깨닫게 해준다.&lt;/p&gt;

&lt;h2 id=&quot;나는-5년뒤-어떤-개발자가-되고-싶은가&quot;&gt;나는 5년뒤 어떤 개발자가 되고 싶은가&lt;/h2&gt;

&lt;p&gt;5년차 개발자가 된 나는 어떤 모습일까? 나는 팀원들이 모두 같이 일하고 싶어 하는 개발자가 되고 싶다. 또한 팀원들이 ‘혜림님께 물어보고 같이 해결하면 해결이 너무 잘 돼!’ 라고 하는 개발자가 되고 싶다. 그런 개발자가 되기 위해 의사소통 능력도 더욱 키우고, 내 개발 실력도 높이기 위해 열심히 정진해야겠다.&lt;/p&gt;

&lt;h3 id=&quot;목표로-차근차근&quot;&gt;목표로 차근차근&lt;/h3&gt;

&lt;p&gt;이번년도 첫번째 목표는 &lt;em&gt;부트캠프 수료하기&lt;/em&gt;였다. 그 첫번째 목표를 이뤘고 많은 것을 얻고 성장한 것 같다. 다음 목표는 &lt;em&gt;개발자로 커리어 전환하기&lt;/em&gt;이다. 이 두가지 목표를 모두 이룬다면 설정한 2021의 목표는 모두 이룬 것이라고 할 수 있겠다. 좀 더 큰 그림을 그린다면, 위에서 언급한 이상적인 개발자가 되기 위해 부지런히 걸어가야겠다.&lt;/p&gt;</content><author><name>Rim</name><email>hyerimc858@gmail.com</email></author><category term="Chat" /><category term="Developer" /><summary type="html">비전공자인 내가 개발에 입문한 계기와 과정</summary></entry><entry><title type="html">[Django] DateTimeField</title><link href="http://localhost:4000/til/datetime/" rel="alternate" type="text/html" title="[Django] DateTimeField" /><published>2021-08-22T00:00:00+09:00</published><updated>2021-11-13T00:00:00+09:00</updated><id>http://localhost:4000/til/datetime</id><content type="html" xml:base="http://localhost:4000/til/datetime/">&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;2021&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;08&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;00.000000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;DateTimeField를 사용했을 때 위의 형식처럼 데이터가 들어가게 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;원하는-데이터만-뽑아오고-싶다&quot;&gt;원하는 데이터만 뽑아오고 싶다!&lt;/h2&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_date&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2021&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tzinfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UTC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;DateTimeField를 가지고 있는 객체의 필드를 가져오면 이런 형식으로 출력된다&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;날짜만-출력&quot;&gt;날짜만 출력&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2021&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;date()를 이용하여 날짜만 뽑아올 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;시간만-출력&quot;&gt;시간만 출력&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;time()을 이용하여 시간도 출력이 가능하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;해당-날짜의-요일-출력&quot;&gt;해당 날짜의 요일 출력&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weekday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;해당하는 날짜의 요일도 출력할 수 있다.&lt;/li&gt;
  &lt;li&gt;0:월, 1:화, 2:수, 3:목, 4:금, 5:토, 6:일&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;월-일-시-분-초-마이크로초-개별-출력&quot;&gt;월, 일, 시, 분, 초, 마이크로초 개별 출력&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#월
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;month&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#일
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#시
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hour&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#분
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minute&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#초
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#마이크로초
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;microsecond&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;datetime 은 다양한 속성을 가지고 있다.&lt;/li&gt;
  &lt;li&gt;이 속성으로 원하는 데이터만 뽑아올 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;원하는-형식으로-출력하고-싶다&quot;&gt;원하는 형식으로 출력하고 싶다!&lt;/h2&gt;

&lt;h3 id=&quot;strftime-method&quot;&gt;strftime method&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%Y년 %m월 %d일&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'2021년 11월 06일'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%Y-%m-%d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'2021-11-06'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%H시 %M분 %S초&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'00시 00분 00초'&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;위처럼 strftime 메서드를 이용하여 원하는 형식으로 출력할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;datetime-module-사용&quot;&gt;datetime module 사용&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from datetime import datetime
&amp;gt;&amp;gt;&amp;gt; datetime.now
&amp;lt;built-in method now of type object at 0x7fdd8ea0fc20&amp;gt;
&amp;gt;&amp;gt;&amp;gt; datetime.now()
datetime.datetime(2021, 8, 22, 7, 26, 36, 249828)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;datetime module을 import 해서 현재 datetime을 출력할 수 있다&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Rim</name><email>hyerimc858@gmail.com</email></author><category term="TIL" /><category term="Python" /><category term="Django" /><summary type="html">Django DateTimeField에 대해 알아보자</summary></entry></feed>